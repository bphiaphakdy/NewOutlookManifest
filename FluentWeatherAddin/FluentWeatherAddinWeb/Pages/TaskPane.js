
// AXA E-Mail Prozessor
let currentEmailItem = null;

Office.onReady(() => {
  initializeEmailProcessor();
});

function initializeEmailProcessor() {
  const processBtn = document.getElementById('processEmailBtn');
  
  // E-Mail-Auswahl √ºberwachen
  if (Office.context.mailbox && Office.context.mailbox.item) {
    currentEmailItem = Office.context.mailbox.item;
    updateEmailStatus('E-Mail ausgew√§hlt - Prozess kann gestartet werden', 'success');
    processBtn.disabled = false;
  } else {
    updateEmailStatus('Keine E-Mail ausgew√§hlt. Bitte w√§hlen Sie eine E-Mail in Outlook aus.', 'info');
    processBtn.disabled = true;
  }

  // Event Listener f√ºr Prozess-Button
  processBtn.addEventListener('click', startEmailProcess);

  // E-Mail-√Ñnderungen √ºberwachen (falls verf√ºgbar)
  if (Office.context.mailbox.addHandlerAsync) {
    Office.context.mailbox.addHandlerAsync(
      Office.EventType.ItemChanged, 
      onEmailChanged
    );
  }
}

function onEmailChanged(eventArgs) {
  currentEmailItem = Office.context.mailbox.item;
  if (currentEmailItem) {
    updateEmailStatus('Neue E-Mail ausgew√§hlt - Prozess kann gestartet werden', 'success');
    document.getElementById('processEmailBtn').disabled = false;
  } else {
    updateEmailStatus('Keine E-Mail ausgew√§hlt', 'info');
    document.getElementById('processEmailBtn').disabled = true;
  }
}

function updateEmailStatus(message, type = 'info') {
  const statusDiv = document.getElementById('email-status');
  statusDiv.className = `axa-status ${type}`;
  statusDiv.innerHTML = `<strong>${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</strong> ${message}`;
}

async function startEmailProcess() {
  const processBtn = document.getElementById('processEmailBtn');
  const detailsDiv = document.getElementById('email-details');
  
  if (!currentEmailItem) {
    updateEmailStatus('Keine E-Mail ausgew√§hlt. Bitte w√§hlen Sie eine E-Mail aus.', 'error');
    return;
  }

  try {
    processBtn.disabled = true;
    processBtn.innerHTML = '<span class="axa-icon">‚è≥</span>Verarbeite E-Mail...';
    updateEmailStatus('E-Mail wird verarbeitet...', 'info');

    // E-Mail-Daten extrahieren
    const emailData = await extractEmailData(currentEmailItem);
    
    // EML-Format generieren
    const emlContent = generateEMLContent(emailData);
    
    // An Backend senden
    const result = await sendEMLToBackend(emlContent, emailData);
    
    // Erfolg anzeigen
    updateEmailStatus('E-Mail erfolgreich verarbeitet und an Backend gesendet!', 'success');
    
    // Details anzeigen
    detailsDiv.innerHTML = `
      <strong>Verarbeitete E-Mail:</strong><br>
      üìß Absender: ${emailData.from}<br>
      üìù Betreff: ${emailData.subject}<br>
      üìÑ Gr√∂√üe: ${emlContent.length} Zeichen<br>
      üïê Verarbeitet: ${new Date().toLocaleString('de-DE')}
    `;
    detailsDiv.style.display = 'block';
    
  } catch (error) {
    console.error('Fehler beim Verarbeiten der E-Mail:', error);
    updateEmailStatus(`Fehler: ${error.message}`, 'error');
  } finally {
    processBtn.disabled = false;
    processBtn.innerHTML = '<span class="axa-icon">‚ö°</span>Prozess starten';
  }
}

async function extractEmailData(item) {
  return new Promise((resolve, reject) => {
    // Basis-Informationen sammeln
    const emailData = {
      messageId: item.internetMessageId || `local-${Date.now()}`,
      from: item.from?.emailAddress || 'Unbekannt',
      subject: item.subject || 'Kein Betreff',
      dateTimeCreated: item.dateTimeCreated || new Date(),
      to: item.to?.map(recipient => recipient.emailAddress).join(', ') || '',
      cc: item.cc?.map(recipient => recipient.emailAddress).join(', ') || '',
      conversationId: item.conversationId || ''
    };

    // E-Mail-Body lesen
    item.body.getAsync(Office.CoercionType.Text, (result) => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        emailData.bodyText = result.value || '';
        
        // HTML-Body auch lesen
        item.body.getAsync(Office.CoercionType.Html, (htmlResult) => {
          if (htmlResult.status === Office.AsyncResultStatus.Succeeded) {
            emailData.bodyHtml = htmlResult.value || '';
          }
          resolve(emailData);
        });
      } else {
        reject(new Error(`Fehler beim Lesen des E-Mail-Body: ${result.error.message}`));
      }
    });
  });
}

function generateEMLContent(emailData) {
  // EML-Format generieren (vereinfacht)
  const emlContent = `Message-ID: <${emailData.messageId}>
Date: ${new Date(emailData.dateTimeCreated).toUTCString()}
From: ${emailData.from}
To: ${emailData.to}
Subject: ${emailData.subject}
Content-Type: text/plain; charset=UTF-8

${emailData.bodyText}

--
Generated by AXA E-Mail Processor
Conversation-ID: ${emailData.conversationId}
`;

  return emlContent;
}

async function sendEMLToBackend(emlContent, emailData) {
  const response = await fetch('/api/email/process-eml', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      emlContent: emlContent,
      metadata: {
        from: emailData.from,
        subject: emailData.subject,
        dateTimeCreated: emailData.dateTimeCreated,
        bodyLength: emailData.bodyText.length
      }
    })
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || `HTTP ${response.status}`);
  }

  return await response.json();
}
